name: BuildAndPublish
description: 'Build a .NET project and publish the .nupkg to the feed'
inputs:
  SolutionName: 
    description: 'Name of the Solution'
    required: true
  BuildSolutionType:
    desciption: 'Build Configuration switch.'
    default: 'Release'
  User:
    description: 'UserName'
  Token:
    description: 'NugetToken'

runs:
  using: "composite"
  
  steps:
  - name: EchoUsefulInformation
    run:
      echo "SolutionName is $inputs.SolutionName"
     # echo $"BuildSolutionType: {{ inputs.BuildSolutionType }}"
    shell: bash
      
      
  - uses: actions/checkout@v3
  
  - name: Setup MSBuild
    uses: microsoft/setup-msbuild@v1
    
  - name: Setup Nuget
    uses: NuGet/setup-nuget@v1.1.1
    
  - name: Navigate to Workspace
    run: cd $GITHUB_WORKSPACE
    shell: bash
    
  - name: Create Build Directory
    run: mkdir _build
    shell: bash
    
  - name: Add organization nuget feed
    run: dotnet nuget add source --username ${{ inputs.User }} --password ${{ inputs.Token }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/Aligned-Vision-Group-Engineering/index.json"
    shell: bash
    
    
#  - name: Restore dependencies
#    run: nuget restore ${{ inputs.SolutionName }}
#    shell: bash
    
  - name: Build Solution
#    run: |
#      msbuild.exe EzRep.sln /nologo /nr:false /p:DeployOnBuild=true /p:DeployDefaultTarget=WebPublish /p:WebPublishMethod=FileSystem /p:DeleteExistingFiles=True /p:platform="Any CPU" /p:configuration="Release" /p:PublishUrl="../_build"
#      msbuild ${{ inputs.SolutionName }} /nologo /nr:false /p:DeployOnBuild=true /p:DeployDefaultTarget=WebPublish /p:WebPublishMethod=FileSystem /p:DeleteExistingFiles=True /p:platform="Any CPU" /p:configuration="Release" /p:PublishUrl="../_build"
    run: msbuild.exe ${{ inputs.SolutionName }} //nologo //nr:false //p:DeployOnBuild=true //p:DeployDefaultTarget=WebPublish //p:WebPublishMethod=FileSystem //p:DeleteExistingFiles=True //p:platform="Any CPU" //p:configuration="Release" //p:PublishUrl="..\_build"
    shell: bash
    
#  - name: Clean
#    #run: dotnet clean ${{ inputs.SolutionName }}
#    run: dotnet clean && dotnet nuget locals all --clear
#    shell: bash
#     
#  - name: Setup .NET
#    uses: actions/setup-dotnet@v3.0.3
#    with:
#      dotnet-version: 5.0.x
#      #dotnet-version: 2.0.3
    
#  - name: Build       
#    run: dotnet build ${{ inputs.SolutionName }} --configuration ${{ inputs.BuildSolutionType }} --no-restore
#    shell: bash
    
  - name: Pack
    id: PackForNuget
    run: dotnet pack --configuration ${{ inputs.BuildSolutionType }}
    shell: bash

 # - name: Find nupkg
  #  id: FindNugetPackage
   # uses: DovnarAlexander/github-action-file-detection@master
    #with:
     # wildcard: '*.nupkg'

  - name: Put To Nuget - from found nupkg
    #run: dotnet nuget push "${{ steps.FindNugetPackage.outputs.found }}" --source github
    run: dotnet nuget push **\*.nupkg --source github
#    run: dotnet nuget push "${{ steps.FindNugetPackage.outputs.found }}" --api-key ${{ inputs.Token }} --source github
    shell: bash
